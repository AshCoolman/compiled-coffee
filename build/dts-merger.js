// Generated by CoffeeScript 1.3.3

/*
Merges typescript source with a definition file with the same name.

TODO
- globbing files
- watch d.ts files too

Things to merge
- class
	generics
	implements
- methods
	params (DONE)
	return types (DONE)
	visibility (DONE)
- attributes
	types (DONE)
	visibility (DONE)

Later
- modules
- functions
- properties
*/


(function() {
  var fs, merger, params, path, writestreamp;

  fs = require('fs');

  path = require('path');

  params = require('commander');

  merger = require('./dts-merger/merger');

  writestreamp = require('writestreamp');

  params.version('0.0.1').usage('TS_FILES').option('-w, --watch', 'Watch for file changes').option('-l, --log', 'Show logging information').option('-p, --dir-prefix <dir>', 'Directories to skip at the beginning of the path', function(s) {
    return s.replace(/\/$/) + '/';
  }).option('-o, --output <dir>', 'Define output directory').parse(process.argv);

  if (params.watch && !params.output) {
    console.error('Can\'t use --watch without --output dir differet than the source one.');
    process.exit();
  }

  global.log = function(msg) {
    if (params.log) {
      return console.log(msg);
    }
  };

  params.args.forEach(function(source) {
    var dir_prefix_length, exec, file, target, _ref;
    if (source.match(/d\.ts$/)) {
      return;
    }
    file = path.join(process.cwd(), source);
    target = source;
    dir_prefix_length = (_ref = params.dirPrefix) != null ? _ref.length : void 0;
    if (dir_prefix_length && target.slice(0, dir_prefix_length) === params.dirPrefix) {
      target = target.substr(dir_prefix_length);
    }
    target = path.join(params.output || process.cwd(), target);
    exec = function(curr, prev) {
      var content, destination;
      if (curr && curr.mtime === prev.mtime) {
        return;
      }
      content = merger.mergeFile(file);
      console.log("Merged " + source);
      destination = writestreamp(target);
      if (!content) {
        return (fs.createReadStream(file)).pipe(destination);
      } else {
        return destination.write(content, function() {
          return destination.end();
        });
      }
    };
    if (params.watch) {
      log("Watching " + file);
      fs.watchFile(file, {
        persistent: true,
        interval: 500
      }, exec);
      return exec();
    } else {
      return exec();
    }
  });

}).call(this);
