// Generated by CoffeeScript 1.3.3
(function() {
  "Converts commonjs imports and exports into typescript equivalents.\n\nTODO:\n- module functions\n- match exports to specific classes\n- module.exports = {...}\n- multiline exports\nimport asyncmachine = require(\"../src2/asyncmachine\");\nimport expect = require(\"chai\");.expect;\nimport sinon = require(\"sinon\");\nimport Promise = require(\"rsvp\");.Promise;";

  var convert, fs, log, params, path, writestreamp;

  fs = require('fs');

  path = require('path');

  params = require('commander');

  writestreamp = require('writestreamp');

  params.version('0.0.1').usage('TS_FILES').option('-w, --watch', 'Watch for file changes').option('-l, --log', 'Show logging information').option('-p, --dir-prefix <dir>', 'Directories to skip at the beginning of the path', function(s) {
    return s.replace(/\/$/) + '/';
  }).option('-o, --output <dir>', 'Define output directory').parse(process.argv);

  if (params.watch && !params.output) {
    console.error("Can't use --watch without --output dir differet than the 		source one.'");
    process.exit();
  }

  log = function(msg) {
    if (params.log) {
      return console.log(msg);
    }
  };

  convert = function(name) {
    var imports, source, _i, _len;
    source = fs.readFileSync(name, 'utf8');
    imports = [];
    source = source.replace(/(^|\n)(?:var\s)?(\w+)\s=\srequire\((['".\w/]+)\);?/g, function(match, _1, _2, _3) {
      imports.push(_2);
      return "" + _1 + "import " + _2 + " = require(" + _3 + ");";
    });
    if (imports) {
      for (_i = 0, _len = imports.length; _i < _len; _i++) {
        name = imports[_i];
        source = source.replace(new RegExp("^(var[^;]+?)((, )?" + name + ")", 'm'), '$1');
      }
    }
    source = source.replace("var ;", '');
    source = source.replace(/(?:^|\n)(class|function|module )/g, "export $1");
    return source;
  };

  params.args.forEach(function(source) {
    var dir_prefix_length, exec, file, target, _ref;
    if (source.match(/d\.ts$/)) {
      return;
    }
    file = path.join(process.cwd(), source);
    target = source;
    dir_prefix_length = (_ref = params.dirPrefix) != null ? _ref.length : void 0;
    if (dir_prefix_length && target.slice(0, dir_prefix_length) === params.dirPrefix) {
      target = target.substr(dir_prefix_length);
    }
    target = path.join(params.output || process.cwd(), target);
    exec = function() {
      var content, destination;
      content = convert(file);
      console.log("Fixed modules for " + source);
      destination = writestreamp(target);
      return destination.write(content, function() {
        return destination.end();
      });
    };
    if (params.watch) {
      fs.watch(file, exec);
      return exec();
    } else {
      return exec();
    }
  });

}).call(this);
